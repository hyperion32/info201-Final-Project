print("hello")
print(sample(1:5))
print(sample(1:5), replace = TRUE)
print(sample(1:5), replace = FALSE)
print(sample(1:5), size = 3 replace = FALSE)
print(sample(1:5), size = 3, replace = FALSE)
print(sample(1:5), size = 3, replace = TRUE)
print(sample(1:5), size = 7, replace = TRUE)
print(sample(1:3), size = 3, replace = TRUE)
print(sample(1:3), size = 3, replace = FALSE)
print(sample(1:3), size = 3, replace = TRUE)
library('plotly')
# bar.R
#----------------------------------------------
# Demo of plotly
# This code is from: https://plot.ly/r/choropleth-maps/#choropleth-maps-in-r
#----------------------------------------------
install("plotly")
# filename: example01.R
#----------------------------------------------
# Gives examples of using lapply() and with()
# from Base R and mutate() from the dplyr
# package
#----------------------------------------------
library(dplyr)
# bar.R
#----------------------------------------------
# Demo of plotly
# This code is from: https://plot.ly/r/choropleth-maps/#choropleth-maps-in-r
#----------------------------------------------
install.packages("lintr")
library(lintr)
library('plotly')
# bar.R
#----------------------------------------------
# Demo of plotly
# This code is from: https://plot.ly/r/choropleth-maps/#choropleth-maps-in-r
#----------------------------------------------
install.packages("plotly")
library('plotly')
library(ggplot2)
install.packages("rlang")
library(dplyr)
install.packages("dplyr")
1+3
R.Version()
update.packages("rlang")
library("rlang")
library(rlang)
install.packages("rlang")
library(rlang)
# bar.R
#----------------------------------------------
# Demo of plotly
# This code is from: https://plot.ly/r/choropleth-maps/#choropleth-maps-in-r
#----------------------------------------------
install.packages("plotly")
library('plotly')
x <- c('Product A', 'Product B', 'Product C')
y <- c(20, 14, 23)
text_popups <- c('27% market share', '24% market share', '19% market share')
data <- data.frame(x, y, text_popups)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text,
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = "January 2013 Sales Report",
xaxis = list(title = ""),
yaxis = list(title = ""))
#----------------------------------------------
# Show plot
#----------------------------------------------
print(p)
x <- c('Product A', 'Product B', 'Product C')
y <- c(20, 14, 23)
text_popups <- c('27% market share', '24% market share', '19% market share')
data <- data.frame(x, y, text_popups)
p <- plot_ly(data, x = ~x, y = ~y, type = 'bar', text = text_popups,
marker = list(color = 'rgb(158,202,225)',
line = list(color = 'rgb(8,48,107)',
width = 1.5))) %>%
layout(title = "January 2013 Sales Report",
xaxis = list(title = ""),
yaxis = list(title = ""))
#----------------------------------------------
# Show plot
#----------------------------------------------
print(p)
shiny::runApp('Documents/InfoCoding')
runApp('Documents/InfoCoding/info201-Final-Project/sleep101_viz')
runApp('Documents/InfoCoding/info201-Final-Project/sleep101_viz')
setwd("~/Documents/InfoCoding/info201-Final-Project")
read.csv("data/hchs/datasets/hchs-sol-sueno-ancillary-dataset-0.5.0.csv")
df <- read.csv("data/hchs/datasets/hchs-sol-sueno-ancillary-dataset-0.5.0.csv")
View(df)
runApp('sleep101_viz')
runApp('sleep101_viz')
runApp('sleep101_viz')
runApp('sleep101_viz')
runApp('sleep101_viz')
runApp('sleep101_viz')
runApp('sleep101_viz')
runApp('sleep101_viz')
runApp('sleep101_viz')
runApp('sleep101_viz')
runApp('sleep101_viz')
runApp('sleep101_viz')
runApp('sleep101_viz')
shiny::runApp()
runApp()
getwd()
setwd("C:/Users/greys/INFO 201/Final Project/info201-Final-Project")
runApp('sleep101_viz')
getwd()
runApp('sleep101_viz')
source("../source/analysis.R")
source("./source/analysis.R")
source("source/analysis.R")
df <- read.csv("../data/hchs/datasets/hchs-sol-sueno-ancillary-dataset-0.5.0.csv")
setwd("C:/Users/greys/INFO 201/Final Project/info201-Final-Project")
df_personal <- read.csv("../data/hchs/datasets/hchs-sol-baseline-dataset-0.5.0.csv")
df_personal <- read.csv("data/hchs/datasets/hchs-sol-baseline-dataset-0.5.0.csv")
df <- read.csv("../data/hchs/datasets/hchs-sol-sueno-ancillary-dataset-0.5.0.csv")
df <- read.csv("data/hchs/datasets/hchs-sol-sueno-ancillary-dataset-0.5.0.csv")
df_personal <- read.csv("data/hchs/datasets/hchs-sol-baseline-dataset-0.5.0.csv")
source("source/analysis.R")
runApp('sleep101_viz')
runApp('sleep101_viz')
source("source/analysis.R")
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
source("source/analysis.R")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Analysis of the Factors that Affect Sleep"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
#sliderInput("n_breaks",
#            "Number of bins:",
#             min = 10,
#             max = 50,
#             value = 30)
# ),
# sidebarPanel(
selectInput('xCol', 'Choose First Variable', names(df_graph)),
selectInput('yCol', 'Choose Second Variable', names(df_graph))),
mainPanel(
# plotOutput("distPlot"),
plotOutput("scatterPlot"))
))
# Define server logic required to draw a histogram
server <- function(input, output, session) {
#output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
#  hist(df$SAWA50,
#       breaks = as.numeric(input$n_breaks),
#       xlab = "Duration (minutes)",
#       ylab = "Frequency",
#       main = "Average in-bed duration from main sleep period over all days",
#       col = 'darkgray', border = 'white')
# })
df_new <- reactive({df_graph[, c(input$xCol, input$yCol)]})
output$scatterPlot <- renderPlot({plot(df_new(), pch = 20, cex = 2, col = "Black",
main = "Analysis")})
}
# Run the application
shinyApp(ui = ui, server = server)
df <- read.csv("data/hchs/datasets/hchs-sol-sueno-ancillary-dataset-0.5.0.csv")
df_personal <- read.csv("data/hchs/datasets/hchs-sol-baseline-dataset-0.5.0.csv")
setwd("C:/Users/greys/INFO 201/Final Project/info201-Final-Project")
library(dplyr)
df <- read.csv("data/hchs/datasets/hchs-sol-sueno-ancillary-dataset-0.5.0.csv")
df_personal <- read.csv("data/hchs/datasets/hchs-sol-baseline-dataset-0.5.0.csv")
df_personal_select <- df_personal %>%
select('Patient ID' = pid, 'Physical activity level (low, mod, high)' = GPAQ_LEVEL,
'Total physical activity (min/week)' = GPAQ_MV_WEEK,
'Total physical activity (min/day)' = GPAQ_TOTAL,
'Work-related physical activity (min/day)' = GPAQ_WORK)
df_select <- df %>%
select('Patient ID' = PID,
'Average sleep time in main sleep over weekdays' = SAWA101,
'Average sleep efficiency in main sleep over weekdays' = SAWA107,
'Average in-bed duration from main sleep period over all days' = SAWA50)
df_graph <- left_join(df_personal_select, df_select, by ='Patient ID', na.rm = FALSE)
library(shiny)
source("source/analysis.R")
source("analysis.R")
source("analysis.R")
runApp()
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
source("analysis.R")
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Analysis of the Factors that Affect Sleep"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
#sliderInput("n_breaks",
#            "Number of bins:",
#             min = 10,
#             max = 50,
#             value = 30)
# ),
# sidebarPanel(
selectInput('xCol', 'Choose First Variable', names(df_graph)),
selectInput('yCol', 'Choose Second Variable', names(df_graph))),
mainPanel(
# plotOutput("distPlot"),
plotOutput("scatterPlot"))
))
# Define server logic required to draw a histogram
server <- function(input, output, session) {
#output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
#  hist(df$SAWA50,
#       breaks = as.numeric(input$n_breaks),
#       xlab = "Duration (minutes)",
#       ylab = "Frequency",
#       main = "Average in-bed duration from main sleep period over all days",
#       col = 'darkgray', border = 'white')
# })
df_new <- reactive({df_graph[, c(input$xCol, input$yCol)]})
output$scatterPlot <- renderPlot({plot(df_new(), pch = 20, cex = 2, col = "Black",
main = "Analysis")})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
source("analysis.R")
page_one <- tabPanel(
"Introduction",
titlePanel("Enter info here"),
p("Enter info here"),
h2("Research Questions"),
p("1. q1"),
p("2. q2"),
)
page_two <- tabPanel(
"Visualizations",
ui <- fluidPage(
titlePanel("Title"),
sidebarLayout(
sidebarPanel(
#sliderInput("n_breaks",
#            "Number of bins:",
#             min = 10,
#             max = 50,
#             value = 30)
# ),
# sidebarPanel(
selectInput('xCol', 'Choose First Variable', names(df_graph)),
selectInput('yCol', 'Choose Second Variable', names(df_graph))
),
mainPanel(
# plotOutput("distPlot"),
plotOutput("scatterPlot")
)
)
)
)
page_three <- tabPanel(
"Future Steps",
ui <- fluidPage(
titlePanel("Conclusion"),
h2("Problem Situation"),
p("Info"),
h2("How will it be addressed?"),
p("info")
)
)
page_four <- tabPanel(
"About the app",
ui <- fluidPage(
titlePanel("Technology Used"),
h2("User Interface(UI)"),
p("To create the Intro and Conclusion pages I had to install the shiny
package and create an app.R file. After this I used the fluidPage
function to create my titles and write my paragraphs. Some of the other
functions I used is the h2( ), p( ), and titlePanel( ) function.
In our UI we also cretaed our drop down menuusing selctInput function"),
h2("Server"),
p(" In the server, we created our visualizations using plotly. We used
different layout schemes to see which type of visualization represented
our data the best. Finally we created two bar graphs, one that was
interactive and the other which isn't. The interactive bar graph can
change its variables based on the input that is chosen from the drop
down menu present in the UI"),
)
)
page_five <- tabPanel(
"About us",
ui <- fluidPage(
titlePanel("Who Are We"),
"Team #1", br(), "Mehul Goel, Destiny Broughton, Salma Mohamed",
br(), "Technical Foundations of Informatics",
br(), "The Information School",
br(), "University of Washington",
br(), "Autumn 2019",
h2("Project Team's Goals"),
"Destiny's individual goal for the project is to delve deeper into
the problem of homelessness and create viable solutions.", br(),
"Salma's individual goal is to find the trends in homeless in the
U.S and what the leading cause is from state to state.", br(),
"Mehul's individual goal is to understand the trends that take
place in homelessness and create ideas for solutions that can reduce
homelessness."),
h2("Links"),
a("Link to the Github Repository "),
#href = "https://github.com/goel-mehul/INFO-201-Group-Project"),
br(),
a("Link to the Technical Report")
#href = "https://github.com/goel-mehul/INFO-201-Group-Project/wiki/
#INFO-201-Technical-Report")
)
ui <- navbarPage(
"My Application",
page_one,
page_two,
page_three,
page_four,
page_five
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
#output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
#  hist(df$SAWA50,
#       breaks = as.numeric(input$n_breaks),
#       xlab = "Duration (minutes)",
#       ylab = "Frequency",
#       main = "Average in-bed duration from main sleep period over all days",
#       col = 'darkgray', border = 'white')
# })
df_new <- reactive({df_graph[, c(input$xCol, input$yCol)]})
output$scatterPlot <- renderPlot({plot(df_new(), pch = 20, cex = 2, col = "Black",
main = "Analysis")})
}
# Run the application
shinyApp(ui = ui, server = server)
#
# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.
#
# Find out more about building applications with Shiny here:
#
#    http://shiny.rstudio.com/
#
library(shiny)
source("analysis.R")
page_one <- tabPanel(
"Introduction",
titlePanel("Enter info here"),
p("Enter info here"),
h2("Research Questions"),
p("1. q1"),
p("2. q2"),
)
page_two <- tabPanel(
"Visualizations",
ui <- fluidPage(
titlePanel("Title"),
sidebarLayout(
sidebarPanel(
#sliderInput("n_breaks",
#            "Number of bins:",
#             min = 10,
#             max = 50,
#             value = 30)
# ),
# sidebarPanel(
selectInput('xCol', 'Choose First Variable', names(df_graph)),
selectInput('yCol', 'Choose Second Variable', names(df_graph))
),
mainPanel(
# plotOutput("distPlot"),
plotOutput("scatterPlot")
)
)
)
)
page_three <- tabPanel(
"Future Steps",
ui <- fluidPage(
titlePanel("Conclusion"),
h2("Problem Situation"),
p("Info"),
h2("How will it be addressed?"),
p("info")
)
)
page_four <- tabPanel(
"About the app",
ui <- fluidPage(
titlePanel("Technology Used"),
h2("User Interface(UI)"),
p("To create the Intro and Conclusion pages I had to install the shiny
package and create an app.R file. After this I used the fluidPage
function to create my titles and write my paragraphs. Some of the other
functions I used is the h2( ), p( ), and titlePanel( ) function.
In our UI we also cretaed our drop down menuusing selctInput function"),
h2("Server"),
p(" In the server, we created our visualizations using plotly. We used
different layout schemes to see which type of visualization represented
our data the best. Finally we created two bar graphs, one that was
interactive and the other which isn't. The interactive bar graph can
change its variables based on the input that is chosen from the drop
down menu present in the UI"),
)
)
page_five <- tabPanel(
"About us",
ui <- fluidPage(
titlePanel("Who Are We"),
"Team #1", br(), "Mehul Goel, Destiny Broughton, Salma Mohamed",
br(), "Technical Foundations of Informatics",
br(), "The Information School",
br(), "University of Washington",
br(), "Autumn 2019",
h2("Project Team's Goals"),
"Greyson's individual goal for the project is to delve deeper into
the problem of homelessness and create viable solutions.", br(),
"John's individual goal is to find the trends in homeless in the
U.S and what the leading cause is from state to state.", br(),
"Harry's individual goal is to understand the trends that take
place in homelessness and create ideas for solutions that can reduce
homelessness."),
h2("Links"),
a("Link to the Github Repository "),
#href = "https://github.com/goel-mehul/INFO-201-Group-Project"),
br(),
a("Link to the Technical Report")
#href = "https://github.com/goel-mehul/INFO-201-Group-Project/wiki/
#INFO-201-Technical-Report")
)
ui <- navbarPage(
"Sleep201",
page_one,
page_two,
page_three,
page_four,
page_five
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
#output$distPlot <- renderPlot({
# generate bins based on input$bins from ui.R
#  hist(df$SAWA50,
#       breaks = as.numeric(input$n_breaks),
#       xlab = "Duration (minutes)",
#       ylab = "Frequency",
#       main = "Average in-bed duration from main sleep period over all days",
#       col = 'darkgray', border = 'white')
# })
df_new <- reactive({df_graph[, c(input$xCol, input$yCol)]})
output$scatterPlot <- renderPlot({plot(df_new(), pch = 20, cex = 2, col = "Black",
main = "Analysis")})
}
# Run the application
shinyApp(ui = ui, server = server)
